// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/autokitteh/kittehub/deploysentry/go/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DeploySentryServiceName is the fully-qualified name of the DeploySentryService service.
	DeploySentryServiceName = "autokitteh.deploysentry.api.v1.DeploySentryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploySentryServiceDeployProcedure is the fully-qualified name of the DeploySentryService's
	// Deploy RPC.
	DeploySentryServiceDeployProcedure = "/autokitteh.deploysentry.api.v1.DeploySentryService/Deploy"
	// DeploySentryServiceSetRatioProcedure is the fully-qualified name of the DeploySentryService's
	// SetRatio RPC.
	DeploySentryServiceSetRatioProcedure = "/autokitteh.deploysentry.api.v1.DeploySentryService/SetRatio"
	// DeploySentryServiceGetProcedure is the fully-qualified name of the DeploySentryService's Get RPC.
	DeploySentryServiceGetProcedure = "/autokitteh.deploysentry.api.v1.DeploySentryService/Get"
)

// DeploySentryServiceClient is a client for the autokitteh.deploysentry.api.v1.DeploySentryService
// service.
type DeploySentryServiceClient interface {
	Deploy(context.Context, *connect.Request[gen.DeployRequest]) (*connect.Response[gen.DeployResponse], error)
	SetRatio(context.Context, *connect.Request[gen.SetRatioRequest]) (*connect.Response[gen.SetRatioResponse], error)
	Get(context.Context, *connect.Request[gen.GetRequest]) (*connect.Response[gen.GetResponse], error)
}

// NewDeploySentryServiceClient constructs a client for the
// autokitteh.deploysentry.api.v1.DeploySentryService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploySentryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploySentryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deploySentryServiceClient{
		deploy: connect.NewClient[gen.DeployRequest, gen.DeployResponse](
			httpClient,
			baseURL+DeploySentryServiceDeployProcedure,
			opts...,
		),
		setRatio: connect.NewClient[gen.SetRatioRequest, gen.SetRatioResponse](
			httpClient,
			baseURL+DeploySentryServiceSetRatioProcedure,
			opts...,
		),
		get: connect.NewClient[gen.GetRequest, gen.GetResponse](
			httpClient,
			baseURL+DeploySentryServiceGetProcedure,
			opts...,
		),
	}
}

// deploySentryServiceClient implements DeploySentryServiceClient.
type deploySentryServiceClient struct {
	deploy   *connect.Client[gen.DeployRequest, gen.DeployResponse]
	setRatio *connect.Client[gen.SetRatioRequest, gen.SetRatioResponse]
	get      *connect.Client[gen.GetRequest, gen.GetResponse]
}

// Deploy calls autokitteh.deploysentry.api.v1.DeploySentryService.Deploy.
func (c *deploySentryServiceClient) Deploy(ctx context.Context, req *connect.Request[gen.DeployRequest]) (*connect.Response[gen.DeployResponse], error) {
	return c.deploy.CallUnary(ctx, req)
}

// SetRatio calls autokitteh.deploysentry.api.v1.DeploySentryService.SetRatio.
func (c *deploySentryServiceClient) SetRatio(ctx context.Context, req *connect.Request[gen.SetRatioRequest]) (*connect.Response[gen.SetRatioResponse], error) {
	return c.setRatio.CallUnary(ctx, req)
}

// Get calls autokitteh.deploysentry.api.v1.DeploySentryService.Get.
func (c *deploySentryServiceClient) Get(ctx context.Context, req *connect.Request[gen.GetRequest]) (*connect.Response[gen.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// DeploySentryServiceHandler is an implementation of the
// autokitteh.deploysentry.api.v1.DeploySentryService service.
type DeploySentryServiceHandler interface {
	Deploy(context.Context, *connect.Request[gen.DeployRequest]) (*connect.Response[gen.DeployResponse], error)
	SetRatio(context.Context, *connect.Request[gen.SetRatioRequest]) (*connect.Response[gen.SetRatioResponse], error)
	Get(context.Context, *connect.Request[gen.GetRequest]) (*connect.Response[gen.GetResponse], error)
}

// NewDeploySentryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploySentryServiceHandler(svc DeploySentryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploySentryServiceDeployHandler := connect.NewUnaryHandler(
		DeploySentryServiceDeployProcedure,
		svc.Deploy,
		opts...,
	)
	deploySentryServiceSetRatioHandler := connect.NewUnaryHandler(
		DeploySentryServiceSetRatioProcedure,
		svc.SetRatio,
		opts...,
	)
	deploySentryServiceGetHandler := connect.NewUnaryHandler(
		DeploySentryServiceGetProcedure,
		svc.Get,
		opts...,
	)
	return "/autokitteh.deploysentry.api.v1.DeploySentryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploySentryServiceDeployProcedure:
			deploySentryServiceDeployHandler.ServeHTTP(w, r)
		case DeploySentryServiceSetRatioProcedure:
			deploySentryServiceSetRatioHandler.ServeHTTP(w, r)
		case DeploySentryServiceGetProcedure:
			deploySentryServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploySentryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploySentryServiceHandler struct{}

func (UnimplementedDeploySentryServiceHandler) Deploy(context.Context, *connect.Request[gen.DeployRequest]) (*connect.Response[gen.DeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.deploysentry.api.v1.DeploySentryService.Deploy is not implemented"))
}

func (UnimplementedDeploySentryServiceHandler) SetRatio(context.Context, *connect.Request[gen.SetRatioRequest]) (*connect.Response[gen.SetRatioResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.deploysentry.api.v1.DeploySentryService.SetRatio is not implemented"))
}

func (UnimplementedDeploySentryServiceHandler) Get(context.Context, *connect.Request[gen.GetRequest]) (*connect.Response[gen.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.deploysentry.api.v1.DeploySentryService.Get is not implemented"))
}
