import os
import glob
import yaml


FOLDER_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
OUTPUT_PATH = os.path.join(os.path.dirname(__file__), "README.md")


class ReadmeMetadataProcessor:
    def __init__(self, readme_file):
        self.readme_file = readme_file
        self.metadata = self.extract_metadata()

    def extract_metadata(self):
        metadata = {}
        with open(self.readme_file, "r") as file:
            lines = file.readlines()

        # Check for metadata block at the top of the README
        if lines[0].strip() == "---":
            metadata_lines = []
            for line in lines[1:]:
                if line.strip() == "---":
                    break
                metadata_lines.append(line)

            # Parse metadata as YAML
            metadata = yaml.safe_load("\n".join(metadata_lines))

        return metadata

    def get_title(self):
        return self.metadata.get("title", "Unknown Title")

    def get_description(self):
        return self.metadata.get("description", "No description available.")

    def get_integrations(self):
        integrations = self.metadata.get("integrations", [])
        return ", ".join(integrations) if integrations else "None"

    def to_table_row(self):
        title = self.get_title()
        description = self.get_description()
        integrations = self.get_integrations()

        if title == "Unknown Title":
            return ""  # Return an empty string for these rows

        return f"| {title} | {description} | {integrations} |\n"


def generate_readme_table(folder_path, output_file):
    # Find all README.md files in the given folder and its subfolders
    readme_files = glob.glob(
        os.path.join(folder_path, "**", "README.md"), recursive=True
    )

    # Start table with headers
    content = "# Projects Overview\n\n"
    content += "| Title | Description | Integrations |\n"
    content += "|-------|-------------|--------------|\n"

    for readme_file in readme_files:
        processor = ReadmeMetadataProcessor(readme_file)
        content += processor.to_table_row()

    # Write the consolidated content to a single README.md in the current directory
    with open(output_file, "w") as output:
        output.write(content)

    print(f"Consolidated README.md table generated at: {output_file}")


def main():
    generate_readme_table(FOLDER_PATH, OUTPUT_PATH)


if __name__ == "__main__":
    main()
